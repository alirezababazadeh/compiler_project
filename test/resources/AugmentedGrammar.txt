Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list
Declaration-list -> EPSILON 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> #ptype Type-specifier #pid ID
Declaration-prime -> #func_start Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> #optional_type_check #declare ;
Var-declaration-prime -> [ #pnum NUM ] #declare_array ; 
Fun-declaration-prime -> ( Params ) #func_def Compound-stmt #func_end 
Type-specifier -> int
Type-specifier -> void
Params -> #ptype int #pid ID Param-prime #declare_param Param-list
Params -> void Param-list-void-abtar
Param-list-void-abtar -> ID Param-prime Param-list
Param-list-void-abtar -> EPSILON
Param-list -> , Param Param-list
Param-list -> EPSILON
Param -> Declaration-initial Param-prime #declare_param
Param-prime -> [  ] #param_array
Param-prime -> EPSILON #param
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list
Statement-list -> EPSILON
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Statement -> For-stmt
Expression-stmt -> Expression #pop;
Expression-stmt -> #break break ;
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #save Statement else #jpf_save Statement #jp
Iteration-stmt -> #iteration_break while #label ( Expression ) #save Statement #while
Return-stmt -> return Return-stmt-prime #return
Return-stmt-prime -> #pnum ;
Return-stmt-prime -> Expression ;

//TODO for statement
For-stmt -> for #get_temp_save #pid ID = Vars Statement #for
Vars -> #pid Var #assign_jp Var-zegond
Var-zegond -> , Var Var-zegond
Var-zegond -> EPSILON
Var -> #pid ID Var-prime

Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression #assign
B -> [ Expression ] #array_usage H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> #push_op Relop Additive-expression
C -> EPSILON
Relop -> <
Relop -> ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> #push_op Addop Term #add_or_sub D
D -> EPSILON
Addop -> +
Addop -> -
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * Signed-factor #mult G
G -> EPSILON
Signed-factor -> + Factor
Signed-factor -> - Factor #neg_fac
Signed-factor -> Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor
Signed-factor-zegond -> - Factor
Signed-factor-zegond -> Factor-zegond
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> #start_func_call ( Args ) #end_func_call
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #array_usage
Var-prime -> EPSILON
Factor-prime -> #start_func_call ( Args ) #end_func_call
Factor-prime -> EPSILON
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> EPSILON
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> EPSILON
