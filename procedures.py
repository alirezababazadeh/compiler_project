from parser import Procedure, ProductionRule

START = 'Program'
TERMINALS = {'$', 'ID', ';', '[', 'NUM', ']', '(', ')', 'int', 'void', ',', '{', '}', 'break', 'if', 'else', 'while',
             'return', 'for', '=', '<', '==', '+', '-', '*', 'Îµ'}

PROCEDURES = {
    "Program": Procedure("Program",
                         [ProductionRule(['int', 'void', '$'], ['Declaration-list', '$'])
                          ],
                         ['$'],
                         False),
    "Declaration-list": Procedure("Declaration-list",
                                  [ProductionRule(['int', 'void'], ['Declaration', 'Declaration-list'])
                                   ],
                                  ['$', 'ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'while', 'return', 'for', '+',
                                   '-'],
                                  True),
    "Declaration": Procedure("Declaration",
                             [ProductionRule(['int', 'void'], ['Declaration-initial', 'Declaration-prime'])
                              ],
                             ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while', 'return',
                              'for', '+', '-'],
                             False),
    "Declaration-initial": Procedure("Declaration-initial",
                                     [ProductionRule(['int', 'void'], ['Type-specifier', 'ID'])
                                      ],
                                     [';', '[', '(', ')', ','],
                                     False),
    "Declaration-prime": Procedure("Declaration-prime",
                                   [ProductionRule([';', '['], ['Var-declaration-prime']),
                                    ProductionRule(['('], ['Fun-declaration-prime'])
                                    ],
                                   ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while',
                                    'return', 'for', '+', '-'],
                                   False),
    "Var-declaration-prime": Procedure("Var-declaration-prime",
                                       [ProductionRule([';'], [';']),
                                        ProductionRule(['['], ['[', 'NUM', ']', ';'])
                                        ],
                                       ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while',
                                        'return', 'for', '+', '-'],
                                       False),
    "Fun-declaration-prime": Procedure("Fun-declaration-prime",
                                       [ProductionRule(['('], ['(', 'Params', ')', 'Compound-stmt'])
                                        ],
                                       ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'while',
                                        'return', 'for', '+', '-'],
                                       False),
    "Type-specifier": Procedure("Type-specifier",
                                [ProductionRule(['int'], ['int']),
                                 ProductionRule(['void'], ['void'])
                                 ],
                                ['ID'],
                                False),
    "Params": Procedure("Params",
                        [ProductionRule(['int'], ['int', 'ID', 'Param-prime', 'Param-list']),
                         ProductionRule(['void'], ['void', 'Param-list-void-abtar'])
                         ],
                        [')'],
                        False),
    "Param-list-void-abtar": Procedure("Param-list-void-abtar",
                                       [ProductionRule(['ID'], ['ID', 'Param-prime', 'Param-list'])
                                        ],
                                       [')'],
                                       True),
    "Param-list": Procedure("Param-list",
                            [ProductionRule([','], [',', 'Param', 'Param-list'])
                             ],
                            [')'],
                            True),
    "Param": Procedure("Param",
                       [ProductionRule(['int', 'void'], ['Declaration-initial', 'Param-prime'])
                        ],
                       [')', ','],
                       False),
    "Param-prime": Procedure("Param-prime",
                             [ProductionRule(['['], ['[', ']'])
                              ],
                             [')', ','],
                             True),
    "Compound-stmt": Procedure("Compound-stmt",
                               [ProductionRule(['{'], ['{', 'Declaration-list', 'Statement-list', '}'])
                                ],
                               ['$', 'ID', ';', 'NUM', '(', 'int', 'void', '{', '}', 'break', 'if', 'else', 'while',
                                'return', 'for', '+', '-'],
                               False),
    "Statement-list": Procedure("Statement-list",
                                [ProductionRule(
                                    ['ID', ',', 'NUM', '(', '{', 'break', 'if', 'while', 'return', 'for', '+', '-'],
                                    ['Statement', 'Statement-list'])
                                ],
                                ['}'],
                                True),
    "Statement": Procedure("Statement",
                           [ProductionRule(['ID', ',', 'NUM', '(', 'break', '+', '-'], ['Expression-stmt']),
                            ProductionRule(['{'], ['Compound-stmt']),
                            ProductionRule(['if'], ['Selection-stmt']),
                            ProductionRule(['while'], ['Iteration-stmt']),
                            ProductionRule(['return'], ['Return-stmt']),
                            ProductionRule(['for'], ['For-stmt']),
                            ],
                           ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while', 'return', 'for', '+', '-'],
                           False),
    "Expression-stmt": Procedure("Expression-stmt",
                                 [ProductionRule(['ID', 'NUM', '(', '+', '-'], ['Expression', ';']),
                                  ProductionRule(['break'], ['break', ';']),
                                  ProductionRule([';'], [';']),
                                  ],
                                 ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while', 'return', 'for', '+',
                                  '-'],
                                 False),
    "Selection-stmt": Procedure("Selection-stmt",
                                [ProductionRule(['if'],
                                                ['if', '(', 'Expression', ')', 'Statement', 'else', 'Statement']),
                                 ],
                                ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while', 'return', 'for', '+',
                                 '-'],
                                False),
    "Iteration-stmt": Procedure("Iteration-stmt",
                                [ProductionRule(['while'], ['while', '(', 'Expression', ')', 'Statement']),
                                 ],
                                ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while', 'return', 'for', '+',
                                 '-'],
                                False),
    "Return-stmt": Procedure("Return-stmt",
                             [ProductionRule(['return'], ['return', 'Return-stmt-prime']),
                              ],
                             ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while', 'return', 'for', '+',
                              '-'],
                             False),
    "Return-stmt-prime": Procedure("Return-stmt-prime",
                                   [ProductionRule([';'], [';']),
                                    ProductionRule(['ID', 'NUM', '(', '+', '-'], ['Expression', ';']),
                                    ],
                                   ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while', 'return', 'for',
                                    '+', '-'],
                                   False),
    "For-stmt": Procedure("For-stmt",
                          [ProductionRule(['for'], ['for', 'ID', '=', 'Vars', 'Statement']),
                           ],
                          ['ID', ';', 'NUM', '(', '{', '}', 'break', 'if', 'else', 'while', 'return', 'for', '+', '-'],
                          False),
    "Vars": Procedure("Vars",
                      [ProductionRule(['ID'], ['Var', 'Var-zegond']),
                       ],
                      ['ID', ';', 'NUM', '(', '{', 'break', 'if', 'while', 'return', 'for', '+', '-'],
                      False),
}
